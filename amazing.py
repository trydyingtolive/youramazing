from maze import *
from PIL import Image, ImageDraw, ImageFont
import packbits
import socket

def __convert(bitlist):
    "Converts a list of bits to bytes"
    out = 0
    for bit in bitlist:
        out = (out << 1) | bit
    return out.to_bytes(90,'big')

def doPrint(tag,address):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)## Non Blocking
    sock.connect((address,9100))
    sock.settimeout(None) ## Blocking
    sock.send(tag)
    sock.close()

def printImg(img, end=False):
    "Sends a PIL image object to printer after converting it to the proper format."
    imgW, imgH  = img.size
    img = img.transpose(Image.ROTATE_270) ##Rotate to fit in the printer
    img = img.transpose(Image.FLIP_LEFT_RIGHT)
    ilist=list(img.getdata())
    img.save("rot.png")
    img.close()
    ##Below is the starting string for a Brother 710-W printer with no cut after
    kid_b1=   b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x001B\x40\x1B\x69\x61\x01\x1B\x69\x55\x4A\x00\x0C\xD4\x3D\x7E\xBE\x4D\x36\x00\x00\x0A\x00\x00\x00\x1B\x69\x7A\x8E\x0B\x3E\x64\x55\x04\x00\x00\x00\x00\x1B\x69\x4D\x00\x1B\x69\x4B\x00\x1B\x69\x64\x00\x00\x4D\x02' 
    ##This is the starting string with a cut after 
    parent_b1=b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x001B\x40\x1B\x69\x61\x01\x1B\x69\x55\x4A\x00\x0C\xD4\x3D\x7E\xBE\x4D\x36\x00\x00\x09\x00\x00\x00\x1B\x69\x7A\x8E\x0B\x3E\x64\x55\x04\x00\x00\x00\x00\x1B\x69\x4D\x00\x1B\x69\x4B\x08\x1B\x69\x64\x00\x00\x4D\x02'
    b2=b""
    b3=b"\x1a" ##Finish and cut paper
    header=b"\x67\x00"
    ##This loop converts the pixels into the bytes the printer can read
    ##hopefully as fast as possible.
    for x in range(0,imgW):
        r=ilist[x*720:((x*720)+720)]
        row = __convert(r)
        row = packbits.encode(row)
        ##This replaces an empty row with the code for an empty road
        if row==b"\xA7\x00":
            b2+=b'Z'
        else:
            b2+=header+chr(len(row)).encode()+row
    if end:
        b1=parent_b1
    else:
        b1=kid_b1
    return(b''.join([b1,b2,b3]))

def __addText(img,y,size,text,x="center", invert=False):
    "Generic function for adding text to an image."
    font=ImageFont.truetype("Arial.ttf", size=size)
    draw=ImageDraw.Draw(img)
    drawW, drawH = draw.textsize(text,font)
    imgW, imgH  = img.size
    if x == "center":
        loc=((imgW-drawW)/2,y)
    elif x == "right":
        loc=((imgW-drawW-10),y)
    elif x == "left":
        loc=(10,y)
    else:
        loc=(x,y)
    if invert:
        draw.text(loc, text, font=font, fill=0)
    else:
        draw.text(loc, text, font=font, fill=255)


m = Maze()
m.create(54, 35, Maze.Create.BACKTRACKING)
img = m.save_maze("maze.png", 5,15)
__addText(img, 655, 40, "Amazing", "right", False)
__addText(img, 20, 40, "You're", "left", False)
img.save("TextMaze.png")
tag = printImg(img, True)
doPrint(tag, "192.168.0.106")

